package array_of_double;

public class ArrayOfDouble {
	private int n;
	private double [] a;
	public ArrayOfDouble()
	{
		a= new double[2];
		n=0;
	}
	public ArrayOfDouble(int compacity)
	{
		if(compacity<0)
			a=new double[10];
		else
			a=new double[compacity];
		n=0;
	}
	@Override
	public String toString()
	{
		String s="";
		for(int i=0;i<n;i++)
			s=s+" "+a[i];
		return s; 
	}
	public void add(double element)
	{
		if(n==a.length)
		{
			double []b=new double[n*2];
			for(int i=0;i<n;i++)
				b[i]=a[i];
			a=b;
		}
		a[n]=element;
		n++;
	}
	public void add(double element, int index)
	{
		if(index<0||index>n)
			System.out.println("out of index");
		else
		{
		if(n==a.length)
		{ 
			double []b=new double [n*2];
			System.arraycopy(a,0,b,0,n);
			a=b;
		}
		for(int i =n; i>index; i--)
		{
			a[i]=a[i-1];
		}
		a[index]=element;
		n++;
		}
	}
	public void remove(int index)
	{
		if(index<0||index>=n)
			System.out.println("out of index");
		else
		{
			if(n==0)
				System.out.println("list of index");
			else
		for(int i=index;i<n-1;i++)
			a[i]=a[i+1];
		a[n-1]=0;
		n--;
		}
	}
	public boolean contains(double element)
	{
		for(int i=0;i<n;i++) {
			if(a[i]==element)
				return true;
		}
		return false;
	}
	public int indexOf(double element)
	{
		for(int i=0;i<n;i++)
		{
			if(a[i]==element)
				return i;
		}
		return -1;
	}
	public int size()
	{
		return n;
	}
	public Double get(int index)
	{
		if(index<0||index>n)
		{
			System.out.println("out of index");
		return null;
		}
		else
			return a[index];
	}
	public void set(int index,double element)
	{
		if(index<0||index>n)
		{
			System.out.println("out of index");
		}
		else
			a[index]=element;	
	}
	public static void main(String[] args) {
		ArrayOfDouble a= new ArrayOfDouble();
		a.add(3.5);
		a.add(2.2);
		a.add(5);
		a.add(6.8);
		a.add(4.5);
		a.add(8);
		a.add(2.5,1);
		System.out.println(a.toString());
		System.out.println(a.contains(4.5));
		

	}

}
