package quan_li_ban_hang;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyListener;
import java.io.FileNotFoundException;
import java.util.Scanner;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;

import doan.Student;

public class GUIQLMUABAN extends JFrame implements ActionListener, ItemListener 
{
	
	int h=0;
	private JLabel lbMa,lbTen,lbTenNv,lbNhaCC,lbSoLuong,lbDonGia,lbNgayMua,lbNgayBan,lbHanDung,lbTien,lbTieuDe;
	private JTextField txtMa,txtTen,txtTenNv,txtNhaCC,txtSoLuong,txtDonGia,txtNgayMua,txtNgayBan,txtHanDung,txtTien;
	private JButton btnSort,btnSearch,btnAdd,btnDelete,btnFix,btnTien;
	private JTable table;
	private JPanel pMa,pTen,pTenNv,pNhaCC,pSoLuong,pDonGia,pNgayMua,pNgayBan,pHanDung,pTien,pBtn;
	private JScrollPane scroll;
	private JRadioButton chonB, chonM;
	private int n, nb = 0, i = 0;
	private Object objects[][];
	private final String[] titles = new String[] { "MaSp", "TenSP", " TenNV","NhaCC","So Luong", "Don Gia", "Ngay Nhap","Ngay Xuat","Han Dung" };
	private Phieu a[] = new Phieu[30];
	public GUIQLMUABAN() {
		//1.Thiet Lap cho Frame
		super("Team fun");
		super.setSize(500,600);
		super.setLocationRelativeTo(null);
		super.setDefaultCloseOperation(EXIT_ON_CLOSE);
		super.setLayout(new GridLayout(19,1));
		
		lbTieuDe= new JLabel();
		lbTieuDe.setText("QUAN LI CUA HANG TAP HOA ");
		lbTieuDe.setForeground(Color.GREEN);
		lbTieuDe.setFont(new Font("",Font.BOLD,15));
		this.getContentPane().add(lbTieuDe);
		
		//2.tao cac panels components
		pMa = new JPanel();
		lbMa= new JLabel("Enter Ma san pham");
		txtMa= new JTextField(15);
		pMa = new JPanel(new FlowLayout(FlowLayout.LEFT));
		pMa.add(lbMa);
		pMa.add(txtMa);
		
		//
		pTen = new JPanel();
		lbTen= new JLabel("Enter Ten sp");
		txtTen= new JTextField(15);
		pTen = new JPanel(new FlowLayout(FlowLayout.LEFT));
		pTen.add(lbTen);
		pTen.add(txtTen);
		
		pTenNv = new JPanel();
		lbTenNv= new JLabel("Enter Ten Nhan Vien");
		txtTenNv= new JTextField(15);
		pTenNv = new JPanel(new FlowLayout(FlowLayout.LEFT));
		pTenNv.add(lbTenNv);
		pTenNv.add(txtTenNv);
		
		pNhaCC = new JPanel();
		lbNhaCC= new JLabel("Enter Ten nhaCC");
		txtNhaCC= new JTextField(15);
		pNhaCC = new JPanel(new FlowLayout(FlowLayout.LEFT));
		pNhaCC.add(lbNhaCC);
		pNhaCC.add(txtNhaCC);
		
		pSoLuong = new JPanel();
		lbSoLuong= new JLabel("Enter So Luong");
		txtSoLuong= new JTextField(15);
		pSoLuong = new JPanel(new FlowLayout(FlowLayout.LEFT));
		pSoLuong.add(lbSoLuong);
		pSoLuong.add(txtSoLuong);
		
		pDonGia = new JPanel();
		lbDonGia= new JLabel("Enter Don Gia");
		txtDonGia= new JTextField(15);
		pDonGia= new JPanel(new FlowLayout(FlowLayout.LEFT));
		pDonGia.add(lbDonGia);
		pDonGia.add(txtDonGia);
		
		pNgayMua = new JPanel();
		lbNgayMua= new JLabel("Enter Ngay Nhap");
		txtNgayMua= new JTextField(15);
		pNgayMua = new JPanel(new FlowLayout(FlowLayout.LEFT));
		pNgayMua.add(lbNgayMua);
		pNgayMua.add(txtNgayMua);
		
		pNgayBan = new JPanel();
		lbNgayBan= new JLabel("Enter Ngay Xuat");
		txtNgayBan= new JTextField(15);
		pNgayBan = new JPanel(new FlowLayout(FlowLayout.LEFT));
		pNgayBan.add(lbNgayBan);
		pNgayBan.add(txtNgayBan);
		
		pHanDung = new JPanel();
		lbHanDung= new JLabel("Enter Han Dung");
		txtHanDung= new JTextField(15);
		pHanDung = new JPanel(new FlowLayout(FlowLayout.LEFT));
		pHanDung.add(lbHanDung);
		pHanDung.add(txtHanDung);
		
		pTien = new JPanel();
		lbTien= new JLabel("Tong Tien");
		txtTien= new JTextField(15);
		pTien = new JPanel(new FlowLayout(FlowLayout.LEFT));
		pTien.add(lbTien);
		pTien.add(txtTien);
		
		pBtn=new JPanel();
		chonM=new JRadioButton("Mua Hang");
		chonB=new JRadioButton("Ban Hang");
		ButtonGroup h=new ButtonGroup();
		h.add(chonM);
		h.add(chonB);
	
		//btnSort,btnSearch,btnMore,btnDelete,btnFix,btnTien,btnSum;
		btnAdd=new JButton("Add");
		btnSort=new JButton("Sort");
		btnSearch=new JButton("Search");
		btnDelete=new JButton("Delete");
		btnFix=new JButton("Fix");
		btnTien=new JButton("Tien");
		
		pBtn.add(btnAdd);
		pBtn.add(btnSort);
		pBtn.add(btnSearch);
		pBtn.add(btnDelete);
		pBtn.add(btnFix);
		pBtn.add(btnTien);
		objects = arrayToObject();
		table = new JTable(objects, titles);
		
		//3.them cac components vao Frame
		//pMa,pTen,pSoLuong,pDonGia,pNgayNhap,pNgayXuat,pHanDung,pTien,pTieuDe,pBtn
		objects = arrayToObject();
		table = new JTable(objects, titles);
		
		scroll = new JScrollPane(table, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
				JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		super.add(chonM);
		super.add(chonB);				
		super.add(pMa);
		super.add(pTen);
		super.add(pTenNv);
		super.add(pNhaCC);
		super.add(pSoLuong);
		super.add(pDonGia);
		super.add(pNgayMua);
		super.add(pNgayBan);
		super.add(pHanDung);
		super.add(pTien);
		super.add(pBtn);
		this.add(scroll, BorderLayout.CENTER);

		// dang ki 
		btnAdd.addActionListener(this);
		btnSort.addActionListener(this);
		btnDelete.addActionListener(this);
		btnFix.addActionListener(this);
		btnSearch.addActionListener(this);
		btnTien.addActionListener(this);	
		chonM.addItemListener(this);
		chonB.addItemListener(this);
		
		super.setVisible(true);
		
	}
	public Object[][] arrayToObject() {
		Object[][] objects = new Object[n][5];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < 6; j++) {
				switch (j) {
				case 0:
					objects[i][j] = a[i].getMaSP();
					break;
				case 1:
					objects[i][j] = a[i].getTenSP();
					break;
				case 2:
					objects[i][j] = a[i].getNhanVien();
					break;
				case 3:
					objects[i][j] = a[i].getNhaCC();
					break;
				case 4:
					objects[i][j] = a[i].getSoluong();
					break;
				case 5:
					objects[i][j] = a[i].getDongia();
					break;
				default:
					objects[i][j] = a[i].getDate();
					break;
				}
			}
		}
		return objects;
	}
	public Phieu[] objectToArray(Object objects[][]) {

		Phieu[] st = new Phieu[30];
		int n = objects.length;
		this.n = n;
		for (int i = 0; i < n; i++) {
			st[i] = new Phieu();
			for (int j = 0; j < 5; j++) {
				switch (j) {
				case 0:
					st[i].setMaSP(objects[i][j] + "");
					break;
				case 1:
					st[i].setTenSP(objects[i][j] + "");
					;
					break;
				case 2:
					st[i].setNhanVien(objects[i][j] + "");
					break;
				case 3:
					st[i].setNhaCC(objects[i][j] + "");
					break;
				case 4:
					st[i].setSoluong(Double.parseDouble(objects[i][j] + ""));
					break;
				
				default:
					st[i].setDongia(Double.parseDouble(objects[i][j] + ""));
					break;
				}
			}
		}
		return st;
	}
	public void buttonAdd() throws FileNotFoundException {
		if (i == 1) {
			JOptionPane.showMessageDialog(null, "can not add in this function");
			return;
		}
		/*
		 * Scanner kb = new Scanner(txtCode.getText()); if (!kb.hasNextDouble()||
		 * kb.nextDouble()<0){
		 * 
		 * 
		 * txtCode.setText(""); JOptionPane.showMessageDialog(null,
		 * "Type of data isn't Valaid"); txtCode.requestFocus(); kb.close(); return; }
		 * kb.close();
		 */
		for (int i = 0; i < txtMa.getText().length(); i++)
			if (txtMa.getText().charAt(i) == ' ' || txtMa.getText().charAt(i) < '0'
					|| txtMa.getText().charAt(i) > '9') {
				txtMa.requestFocus();
				txtMa.setText("");
				JOptionPane.showMessageDialog(null, "Type of data isnot valid ");
				return;
			}
		for (int i = 0; i < n; i++)
			if (a[i].getMaSP().equals(txtMa.getText())) {
				JOptionPane.showMessageDialog(null, "Code student cann't be alike");
				txtMa.requestFocus();
				return;
			}
		for (int i = 0; i < txtTen.getText().length(); i++)
			if ((txtTen.getText().charAt(i) >= 'a' && txtTen.getText().charAt(i) <= 'z')
					|| txtTen.getText().charAt(i) == ' '
					|| (txtTen.getText().charAt(i) >= 'A' && txtTen.getText().charAt(i) <= 'Z'))
				continue;
			else {
				JOptionPane.showMessageDialog(null, "type of data is not valid");
				txtTen.setText("");
				txtTen.requestFocus();
				return;
			}
		a[n] = new Phieu();
		a[n].setMaSP(txtMa.getText());
		Scanner kb1 = new Scanner(txtMa.getText());

		a[n].setTenSP(txtTen.getText());
//		if ((txtTenNv.getText()) > 10 || Double.parseDouble(txtM1.getText()) < 0) {
//			JOptionPane.showMessageDialog(null, "mark isn't valid");
//			txtM1.setText("");
//			txtM1.requestFocus();
//			return;
//		}
//		a[n].setM1(Double.parseDouble(txtM1.getText()));
//		if (Double.parseDouble(txtM2.getText()) > 10 || Double.parseDouble(txtM2.getText()) < 0) {
//			JOptionPane.showMessageDialog(null, "mark isn't valid");
//			txtM2.setText("");
//			txtM2.requestFocus();
//			return;
//		}
//		a[n].setM2(Double.parseDouble(txtM2.getText()));
//		for (int i = 0; i < txtM3.getText().length(); i++)
//			if (txtM3.getText().charAt(i) < '0' || txtM3.getText().charAt(i) > '9') {
//				JOptionPane.showMessageDialog(null, "mark is not valid");
//				txtM3.setText("");
//				txtM3.requestFocus();
//				return;
//			}
//		if (Double.parseDouble(txtM3.getText()) > 10 || Double.parseDouble(txtM3.getText()) < 0) {
//			JOptionPane.showMessageDialog(null, "mark isn't valid");
//			txtM3.setText("");
//			txtM3.requestFocus();
//			return;
//		}
//		a[n].setM3(Double.parseDouble(txtM3.getText()));
		n++;
		objects = arrayToObject();
		this.remove(scroll);
		table = new JTable(objects, titles);
		scroll = new JScrollPane(table, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
				JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		this.add(scroll, BorderLayout.CENTER);
		this.validate();
	}

	@Override
	public void actionPerformed(ActionEvent e) {
	 if (e.getSource() == btnDelete) {
		chonM.setIcon(null);
		chonB.setIcon(null);
		txtMa.setText("");
		txtTen.setText("");
		txtDonGia.setText("");
		txtSoLuong.setText("");
		txtNgayMua.setText("");
		txtNgayBan.setText("");
		txtHanDung.setText("");
		txtTien.setText("");
	}
	}
	
	@Override
	public void itemStateChanged(ItemEvent e) {
	
		if(e.getItem()== chonM )
		{
			h=1;
			txtMa.setEditable(true);
			txtDonGia.setEditable(true);
			txtNgayMua.setEditable(false);
			txtNgayBan.setEditable(true);
			txtSoLuong.setEditable(true);
			txtTen.setEditable(true);
			txtTien.setEditable(true);
			txtHanDung.setEditable(false);
		}
		if(e.getItem()==chonB) {
				h=2;	
				txtMa.setEditable(true);
				txtDonGia.setEditable(true);
				txtNgayMua.setEditable(true);
				txtNgayBan.setEditable(false);
				txtSoLuong.setEditable(true);
				txtTen.setEditable(true);
				txtTien.setEditable(true);
				txtHanDung.setEditable(true);
				
			}
			
	}
	public static void main(String[] args) {
		GUIQLMUABAN qlg=new GUIQLMUABAN();
}
}