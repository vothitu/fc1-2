package stack;

public class MyStackLinkedList<E> {
	public class Node{
		private E info;
		private Node next;
		public Node(E info) 
		{
			this.info=info;
			this.next=null;
		}
		public Node(E info,Node next) 
		{
			this.info=info;
			this.next=next;
		}
	}
		private Node top;
		private int size;
		public MyStackLinkedList() {
			top=null;
			size=0;
	}
		public boolean empty() {
			if(top==null)
				return true;
			else
				return false;
		}
		public E push(E e) {
			Node p = new Node (e);
			if(top==null) {
				top=p;
			}
			else {
				p.next=top;
				top=p;
			}
		size++;
		return e;
		}
		public E peek() {
			if(top==null) {
				System.out.println("Stack is empty");
			return null;
			}
			else
				return top.info;
		}
		public E pop() {
			if(top==null) {
				System.out.println("Stack is empty");
			return null;
			}
			else {
				E tmp = top.info;
			top=top.next;
			size--;
			return tmp;
			}
		}
		@Override
		public String toString() {
			String s=" ";
			Node q= top;
			while(q!=null) {
				s=q.info+" "+ s;
				q=q.next;
			}
			return s;
		}
		//ham  sreach tra ve vi tri cua phan tu e bat dau tu dinh =1
		// -1 neu k co
		public int search(E e) {
			int t=1;
			Node q=top;
			while(q!=null) {
				q=q.next;
				t++;
			}
			if(q==null) return -1;
			return t;
		}

	public static void main(String[] args) {
		MyStackLinkedList <Integer> stack= new MyStackLinkedList<Integer>();
		stack.push(8);
		stack.push(1);
		stack.push(2);
		stack.push(20);
		stack.push(15);
		stack.push(10);
		System.out.println(stack.toString());
		
		System.out.println(stack.search(8));
	}

}
