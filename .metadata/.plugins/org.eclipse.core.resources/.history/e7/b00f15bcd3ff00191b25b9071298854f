package tree;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class Tree<E> {
	private class Node<E> {
		private Node left,right;
		private int level;
		private E info;
		public Node(E info)
		{
			this.info = info;
			this.left = this.right = null;
		}
		public Node(E info,Node left, Node right)
		{
			this.info = info;
			this.left = left;
			this.right = right;
		}
	}
	Node root;
	public Tree()
	{
//		root = new Node(3,
//				new Node(4,
//						new Node(7),null)
//				,new Node(1,
//						new Node(8),new Node(10,
//								new Node(2),new Node(5))));
		root = new Node(15,new Node(7,new Node(4),new Node(3)),new Node(1,new Node(2,new Node(10),null),new Node(5,new Node(6),new Node(7)) ) );
//		root = new Node(7,new Node(5,new Node(3),new Node	(4)),null);
		root.level = 1;
	}
	private void inOrder(Node r)
	{
		if(r != null)
		{
			System.out.println(r.info);
			inOrder(r.left);
			inOrder(r.right);
		}
	}
	public void inOrder()
	{
		inOrder(root);
	}
	public void midOrder(Node r)
	{
		if(r != null)
		{
			inOrder(r.left);
			System.out.println(r.info);
			inOrder(r.right);
		}
	}
	public void midOrder()
	{
		midOrder(root);
	}
	public void postOrder(Node r)
	{
		if(r != null)
		{
			postOrder(r.left);
			postOrder(r.right);
			System.out.println(r.info);
		}
	}
	public void postOrder()
	{
		postOrder(root);
	}
	public void sum()
	{
		System.out.println("Sum : "+sum(root)); 
	}
	public int sum(Node r)
	{
		if(r!= null) {
			if((int)r.info % 2 ==0 )
				return (int)r.info + sum(r.left) + sum(r.right);
			else
				return sum(r.left) + sum(r.right);
		}
		else return 0;
	}
	public int countLevel1()
	{
		return (root.left == null ? 0 : 1) + (root.right == null ? 0 : 1);
	}
	public int countLevel2()
	{
		return countNode(root.left)+countNode(root.right);
	}
	public int countNode(Node node)
	{
		if(node == null) return 0;
		return (node.left == null ? 0 : 1) + (node.right == null ? 0 : 1);
	}
	public int getNumberOfRoot()
	{
		return getNumberOfNode(root);
	}
	private int getNumberOfNode(Node node)
	{
		if(node == null) 
			return 0;
		else return 1 + getNumberOfNode(node.left) + getNumberOfNode(node.right);
	}
	public int getNodeLeaf()
	{
		return getNodeLeaf(root);
	}
	private int getNodeLeaf(Node node)
	{
		if(node == null)
			return 0;
		if(node.left == null && node.right == null)
			return 1;
		else return getNodeLeaf(node.left) + getNodeLeaf(node.right);
	}
	public int countOdd()
	{
		return countOdd(root);
	}
	public int countOdd(Node node)
	{
		if(node == null)
			return 0;
		else
			return ( (int)node.info % 2 == 0 ? 0 : 1 ) + countOdd(node.left) + countOdd(node.right);
		
	}
	public boolean isPrime(int n)
	{
		for(int i = 2 ; i <= n/2 ; i++)
			if(n % i == 0)
				return false;
		return (n!=1);
	}
	public int sumPrime(Node node)
	{
		if(node == null)
			return 0;
		return (isPrime((int)node.info) ? (int)node.info : 0) + sumPrime(node.left) + sumPrime(node.right);  
	}
	public int countPrime(Node node)
	{
		if(node == null)
			return 0;
		return (isPrime((int)node.info) ? 1 : 0) + countPrime(node.left) + countPrime(node.right);
	}
	public double average()
	{
		return 1.0*sumPrime(root)/countPrime(root);
	}
	public int heightOfTree()
	{
//		return 1 + maxHeight(root.left) > maxHeight(root.right) ? maxHeight(root.left) : maxHeight(root.right);
		return maxHeight(root);
	}
	
	private int maxHeight(Node node)
	{
		if(node == null)
			return 0;
		else return 1 + Math.max(maxHeight(node.left),maxHeight(node.right)) ;
	}
	private boolean search(int x,Node node)
	{
		if(node == null)
			return false;
		if((int)node.info == x)
			return true;
		else return search(x,node.left) || search(x,node.right);
	}
	public boolean searh(int x)
	{
		return search(x,root.left) || search(x,root.right);
	}
	public int indexofX(int x,Node node)
	{
		if((int)node.info == x)
			return 1;
		if(search(x,node))
			return 1 + Math.max(indexofX(x,node.left), indexofX(x,node.right));
		else return 0;
			
	}
	public void chieurong()
	{	
		if(root!= null)
		{
			String s = "";
			Queue<Node> q = new LinkedList<Node>();
			q.add(root);
			while(!q.isEmpty())
			{
				Node p = q.poll();
				s+=p.info+" ";
				if(p.left != null )
					q.add(p.left);
				if(p.right != null )
					q.add(p.right);
			}
			System.out.println(s);
		}
	}
	public void chieusau()
	{
		if(root!= null)
		{	
			String s = "";
			Stack<Node> huy = new Stack<Node>();
			huy.push(root);
			while(!huy.isEmpty())
			{
				Node p = huy.pop();
				s+=p.info+" ";
				if(p.left!= null)
					huy.push(p.left);
				if(p.right!= null)
					huy.push(p.right);
			}
			System.out.println(s);
		}
	}
	public void timX(int x)
	{
		timX(x,root);
	}
	//i
	private void timX(int x,Node node)
	{
		if(node != null)
		{
			if((int)node.info == x)
				System.out.println("Level : "+node.level);
			if(node.left!=null)
			{
				node.left.level = node.level+1;
				timX(x,node.left);
			}
			if(node.right!=null)
			{
				node.right.level = node.level+1;
				timX(x,node.right);
			}
		}
	}
	//j
	public void kiemTraRoot()
	{
		System.out.println("Root la max : "+(max() == (int)root.info));
	}
	public int max()
	{	
		int max = (int)root.info;
		if(root!= null)
		{
			Queue<Node> huy = new LinkedList<Node>();
			huy.add(root);
			while(!huy.isEmpty())
			{
				Node p = huy.poll();
				if((int)p.info>max)
					max = (int)p.info;
				if(p.left!=null)
					huy.add(p.left);
				if(p.right!=null)
					huy.add(p.right);
				
			}
		}
		return max;
	}
	//l
	public void timMax()
	{
		if(root!= null)
		{
			int max = max();
			Queue<Node> q = new LinkedList<Node>();
			q.add(root);
			while(!q.isEmpty())
			{
				Node p = q.poll();
				if((int)p.info == max)
					System.out.print("Level : "+p.level);
				if(p.left != null )
				{
					p.left.level = p.level + 1;
					q.add(p.left);
				}
					
				if(p.right != null )
				{
					p.right.level = p.level + 1;
					q.add(p.right);
				}
					
			}
		}
	}
	
	public void mucNhieuNodeNhat()
	{	
		if(root!= null)
		{
			int max = 1,muc = 1;
			Queue<Node> huy = new LinkedList<Node>();
			System.out.println("Muc 1 : ");
			System.out.println(root.info);
			if(root.left != null)
			{
				root.left.level = root.level +1;
				huy.add(root.left);
			}
			if(root.right != null)
			{
				root.right.level = root.level +1;
				huy.add(root.right);
			}
			int maxTmp = 0,mucTmp = 0;
			while(!huy.isEmpty())
			{
				Node q = huy.poll();
				if(q.level != mucTmp)
				{	
					if(maxTmp > max)
					{
						max = maxTmp;
						muc = mucTmp;
					}
					maxTmp = 1;
					System.out.println("Muc "+q.level+" : ");
					System.out.println(q.info);
					mucTmp = q.level;
				} else {
					System.out.println(q.info);
					maxTmp++;
				}
				if(q.left != null)
				{
					q.left.level = q.level +1;
					huy.add(q.left);
				}
				if(q.right != null)
				{
					q.right.level = q.level +1;
					huy.add(q.right);
				}	
			}
			System.out.println("Muc co nhieu node nhat "+muc+" voi so node la "+max);
		}
		
	}
	
	public static void main(String[] args)
	{
		Tree<Integer> huy = new Tree<Integer>();
		huy.chieusau();
		huy.chieurong();
//		huy.kiemTraRoot();
//		huy.timX(7);
		huy.mucNhieuNodeNhat();
	}
}

